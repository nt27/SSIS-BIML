<#@template tier="1"#>

<Biml
	xmlns="http://schemas.varigence.com/biml.xsd">
	<Packages>
	        <#
	        
            int i=0;
            string strConnectionString = "Server=localhost;Initial Catalog=JUN_ODS;Integrated Security=SSPI;";
            var connectionStringBuilder = new System.Data.SqlClient.SqlConnectionStringBuilder(strConnectionString);
            var sqlConnection  = new System.Data.SqlClient.SqlConnection(connectionStringBuilder.ConnectionString);
            sqlConnection.Open();
            
            System.Data.DataTable dtTables = new System.Data.DataTable();        
            string strSql = "Select Distinct TABLE_NAME as TableName From INFORMATION_SCHEMA.VIEW_TABLE_USAGE Where VIEW_NAME like 'vw_ndm_%' --and TABLE_NAME Not in (select Distinct Table_Name from INFORMATION_SCHEMA.COLUMNS where CHARACTER_MAXIMUM_LENGTH =-1 )Order by TABLE_NAME";
            
            System.Data.SqlClient.SqlCommand sqlCmdTable = new System.Data.SqlClient.SqlCommand(strSql,sqlConnection);
            System.Data.SqlClient.SqlDataAdapter sqlDAPTable = new System.Data.SqlClient.SqlDataAdapter(sqlCmdTable);
            sqlDAPTable.Fill(dtTables);
         
            int iTableCount =0;
            foreach(System.Data.DataRow dtTableRow in dtTables.Rows ) 
            { 
                //Fetch Table Columns
                string Table =  dtTableRow["TableName"].ToString();
                bool IsNVarcharMaxTypeTable=false;
                System.Data.DataTable dtTableColumns = new System.Data.DataTable();
                strSql = "Select Column_Name, DATA_TYPE, ISNull(CHARACTER_MAXIMUM_LENGTH,0) as MaxCharLength From INFORMATION_SCHEMA.COLUMNS Where TABLE_NAME='"+ Table +"'";
                System.Data.SqlClient.SqlCommand sqlCmdColumn = new System.Data.SqlClient.SqlCommand(strSql,sqlConnection);
                System.Data.SqlClient.SqlDataAdapter sqlDAP = new System.Data.SqlClient.SqlDataAdapter(sqlCmdColumn);
                sqlDAP.Fill(dtTableColumns);
                
                foreach(System.Data.DataRow dtRow in dtTableColumns.Rows)
                {
                    if (dtRow["MaxCharLength"].ToString() == "-1")
                        IsNVarcharMaxTypeTable = true;
                }
                iTableCount++;
                
            #>
           <Package Name="_STG_<#=iTableCount#>_<#=Table#>" ConstraintMode="Linear" ProtectionLevel="EncryptSensitiveWithUserKey">
			<Tasks>
			            <ExecuteSQL Name="Truncate Temp Table" ConnectionName="STG">
							<DirectInput>Truncate Table Temp_<#=Table#></DirectInput>
						</ExecuteSQL>
						<Dataflow Name="DataFlow-LoadData">
							<Transformations>
								<OleDbSource Name="Source-Table" ConnectionName="ODS">
									<ExternalTableInput Table="<#=Table#>"/>
								</OleDbSource>
								<#if(IsNVarcharMaxTypeTable) {#>
								<DataConversion Name="Convetion-For-NVARCHARMAX">
								    <Columns>
								        <#
				                foreach(System.Data.DataRow dtRow in dtTableColumns.Rows)
                                    {
                                     if (dtRow["MaxCharLength"].ToString() == "-1")
                                        {
                                    #>
                    <Column SourceColumn="<#=dtRow["Column_Name"]#>" DataType="StringFixedLength" Length="4000" TargetColumn="Converted_<#=dtRow["Column_Name"]#>"/>
								        <#}}
								        
									        
								        #>
								    </Columns>
								</DataConversion>
								<#}#>
								<Sort Name="Sort-Source" AutoPassThrough="true">
									<Columns>
										<Column SourceColumn="id" IsUsed="true" Sort="true" SortOrder="Asc" SortKeyPosition="1"/>
									</Columns>
								</Sort>
								<OleDbSource Name="Dest-Table" ConnectionName="STG">
									<ExternalTableInput Table="<#=Table#>"/>
								</OleDbSource>
								<Sort Name="Sort-Dest" AutoPassThrough="false">
									<Columns>
										<Column SourceColumn="id" IsUsed="true" Sort="true" SortOrder="Asc" SortKeyPosition="1"/>
									</Columns>
								</Sort>
								<MergeJoin Name="Merge Join" JoinType="FullOuterJoin">
									<LeftInputPath OutputPathName="Sort-Source.Output">
										<Columns>
											<# 
                                            i=1;
                                             foreach(System.Data.DataRow dtRow in dtTableColumns.Rows)
                                            {#>
                    	                    <Column SourceColumn="<#=dtRow["Column_Name"]#>" TargetColumn="<#=dtRow["Column_Name"]#>" IsUsed="true" SortKeyPosition="<#=i#>"/>
										    <#i++;
                                            }#>
										

									</Columns>
									</LeftInputPath>
									<RightInputPath  OutputPathName="Sort-Dest.Output">
										<Columns>
											<Column SourceColumn="id" TargetColumn="id2" IsUsed="true" SortKeyPosition="1" />
										</Columns>
									</RightInputPath>
									<JoinKeys>
										<JoinKey LeftColumn="id" RightColumn="id2"/>
									</JoinKeys>
								</MergeJoin>
								<ConditionalSplit Name="Conditional-Split" >
									<OutputPaths>
										<OutputPath Name="New-Record">
											<Expression>!ISNULL([id]) &amp;&amp; ISNULL([id2])</Expression>
										</OutputPath>
										<OutputPath Name="Delete-Record">
											<Expression>ISNULL([id]) &amp;&amp; !ISNULL([id2])</Expression>
										</OutputPath>
									</OutputPaths>
								</ConditionalSplit>
								<Lookup Name="Update-Lookup" OleDbConnectionName="STG" NoMatchBehavior="RedirectRowsToNoMatchOutput">
									<Parameters>
									        <# 
                                            i=1;
                                             foreach(System.Data.DataRow dtRow in dtTableColumns.Rows)
                                            {#>
                                            <Parameter SourceColumn="<#=dtRow["Column_Name"]#>" />
										    <#i++;
                                            }#>
                                                
									</Parameters>
									<Inputs>
											 <# 
                                            i=1;
                                             foreach(System.Data.DataRow dtRow in dtTableColumns.Rows)
                                            {
                                                  if (dtRow["MaxCharLength"].ToString() == "-1"){#>
                                                  <Column SourceColumn="<#= "Converted_" + dtRow["Column_Name"]#>" TargetColumn="<#=dtRow["Column_Name"]#>"/>
                                              <#} else {#>
                                            
                                                <Column SourceColumn="<#=dtRow["Column_Name"]#>" TargetColumn="<#=dtRow["Column_Name"]#>"/>
                                            <#} i++;
                                            }#>
											    
									</Inputs>
									<#
									string strDirectInputSelectColumns = "";
									string strDirectInputQuery = "";
									
									foreach(System.Data.DataRow dtRow in dtTableColumns.Rows)
                                    {
                                        if (dtRow["MaxCharLength"].ToString() == "-1")
                                            strDirectInputSelectColumns += " Cast([" + dtRow["Column_Name"] + "] as NVarchar(4000)) as "+ dtRow["Column_Name"] +",";
                                        else
                                            strDirectInputSelectColumns += "[" + dtRow["Column_Name"] + "],";
                                    }
                                    strDirectInputSelectColumns = strDirectInputSelectColumns.Substring(0, strDirectInputSelectColumns.Length - 1);  
                                    
                                    strDirectInputQuery = "Select " + strDirectInputSelectColumns + " from [dbo].[" + Table + "]";
									#>
									<DirectInput><#=strDirectInputQuery#></DirectInput>
									<#
									string strReferenceColumns = "";
									foreach(System.Data.DataRow dtRow in dtTableColumns.Rows)
                                    {
                                        strReferenceColumns += " and [refTable].[" + dtRow["Column_Name"] + "] = ?";
                                    }
                                    #>
									<ParameterizedQuery>select * from (select * from [dbo].[<#=Table#>]) [refTable]
                                                        where [refTable].[id] = ? <#=strReferenceColumns#>
                                    </ParameterizedQuery>
								</Lookup>
								<OleDbDestination Name="Insert-Update-Record" ConnectionName="STG">
								<InputPath OutputPathName="Update-Lookup.NoMatch" />
								<ExternalTableOutput Table="[dbo].[Temp_<#=Table#>]" />
							</OleDbDestination>
								<OleDbDestination Name="Insert" ConnectionName="STG">
									<InputPath OutputPathName="Conditional-Split.New-Record" />
									<ExternalTableOutput Table="[dbo].[<#=Table#>]" />
								</OleDbDestination>
								<OleDbCommand Name="Delete" ConnectionName="STG">
									<InputPath OutputPathName="Conditional-Split.Delete-Record" />
									<Parameters>
										<Parameter SourceColumn="id2" TargetColumn="Param_0" DataType="Int32" />
									</Parameters>
									<DirectInput>Delete from <#=Table#> Where Id = ?</DirectInput>
								</OleDbCommand>
							</Transformations>
						</Dataflow>
						<ExecuteSQL Name="Execute SQL-Update Record" ConnectionName="STG">
							<DirectInput>
                                <#
                                string strQuery = "";
                                foreach(System.Data.DataRow dtRow in dtTableColumns.Rows)
                                {
                                    strQuery += dtRow["Column_Name"] + " =  B.[" + dtRow["Column_Name"] + "],";
                                }
                                strQuery = strQuery.Substring(0, strQuery.Length - 1);  
                                #>
							    
							    Update <#=Table#> Set 
                                <#=strQuery#>
                                From <#=Table#> A Inner Join Temp_<#=Table#> B
                                On  A.Id = B.ID
							</DirectInput>
						</ExecuteSQL>
	        </Tasks>
	       </Package>
			<#}
		 sqlConnection.Close();
		#></Packages>
</Biml>